// Functions that should be on Base but aren't

import Base#mbRT

map_list(A; B; fn: A -> B, xs: List(A)) : List(B)
  case xs
  | nil  => []
  | cons => cons(_ fn(xs.head), map_list(__ fn, xs.tail))

fold_list(A; B; i: B, f: A -> B -> B, xs: List(A)) : B
  case xs
  | nil  => i
  | cons => f(xs.head, fold_list(A; B; i, f, xs.tail))

generate_list.go(A;
  idx : Number,
  len : Number,
  fn  : Number -> A
) : List(A)
  if idx .==. len then
    []
  else
    cons(_ fn(idx), generate_list.go(A; idx .+. 1, len, fn))

generate_list(A; len: Number, fn: Number -> A) : List(A)
  generate_list.go(A; 0, len, fn)

min(a: Number, b: Number) : Number
  if a .<. b then
    a
  else
    b

max(a: Number, b: Number) : Number
  if a .>. b then
    a
  else
    b
