T Nat
| zero
| succ(pred : Nat)

T Trit
| t0
| t1
| t2

T Bool
| true
| false

T Bits
| be
| b0(pred : Bits)
| b1(pred : Bits)

T Pair<A, B>
| pair(fst : A, snd : B)

T Triple<A, B, C>
| triple(fst : A, snd : B, trd : C)

not(b : Bool) : Bool
  case b
  | true  => false
  | false => true

add_trit(a : Trit, b : Trit) : Trit
  case a
  + b : Trit
  | t0 => case b
    | t0 => t0
    | t1 => t1
    | t2 => t2
  | t1 => case b
    | t0 => t1
    | t1 => t2
    | t2 => t0
  | t2 => case b
    | t0 => t2
    | t1 => t0
    | t2 => t1

sub(bs : Bits) : Bits
  case bs
  | be => be
  | b0 => b1(sub(bs.pred))
  | b1 => b0(bs.pred)

copy_nat(n : Nat) : Pair(Nat, Nat)
  case n
  + copy_nat : Nat -> Pair(Nat, Nat)
  | zero => pair(__ zero, zero)
  | succ => case copy_nat(n.pred) as pred
    | pair => pair(__ succ(pred.fst), succ(pred.snd))

copy_bits(bs : Bits) : Pair(Bits, Bits)
  case bs
  + copy_bits : Bits -> Pair(Bits, Bits)
  | be => pair(__ be, be)
  | b0 => case copy_bits(bs.pred) as pred
    | pair => pair(__ b0(pred.fst), b0(pred.snd))
  | b1 => case copy_bits(bs.pred) as pred
    | pair => pair(__ b1(pred.fst), b1(pred.snd))

is_zero(bs : Bits) : Bool
  case bs
  | be => true
  | b0 => is_zero(bs.pred)
  | b1 => false

stress0(count : Bits) : Bool
  case copy_bits(count) as count
  | pair => case is_zero(count.fst) as iz
    | true  => true
    | false => (stress0(sub(count.snd)))

stress1(n : Nat) : Trit
  case n
  | zero => t1
  | succ => case copy_nat(n.pred) as pred
    | pair => add_trit(stress1(pred.fst), stress1(pred.snd))

Stress2 : Type
  (n : Nat) -> Triple(Stress2, Nat, Trit)

stress2 : Stress2
  (n) => case n
  + stress2 : Stress2
  | zero => triple(___ stress2, zero, t1)
  | succ => case stress2(n.pred) as a 
    | triple => case a.fst(a.snd) as b
      | triple => triple(___ b.fst, succ(b.snd), add_trit(a.trd, b.trd))

//main case let s = succ; let z = zero; stress2(((((((s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(z)))))))))))))))))))))) as p
  //| triple => p.trd

//main stress0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b0(b1(be))))))))))))))))))))))
   //(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B0(B1(Be)))))))))))))))))))))
//main let s = succ; let z = zero; stress1(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(z))))))))))))))))))))))
